import { Client } from 'discord-rpc'
import { isSingboxRunning } from '../ipc/Singbox/singbox'

const DISCORD_CONFIG = {
  CLIENT_ID: '1378082680339697775',
  DEFAULT_ACTIVITY: {
    details: '–î–∞–∂–µ –º–µ–¥–≤–µ–¥–∏ –Ω–∞ –ö–∞–º—á–∞—Ç–∫–µ –¥–æ–≤–µ—Ä—è—é—Ç –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É! üêª‚ú®',
    assets: {
      large_image: 'chatgpt_image_26_2025_23_43_59',
      large_text: '–®–∫–æ–¥–∏—Ç –æ–±—Ö–æ–¥—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏'
    },
    buttons: [
      {
        label: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è',
        url: 'https://t.me/pesherkino_bot?start=ref_855347094'
      },
      {
        label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        url: 'https://t.me/pesherkino_support'
      }
    ]
  }
}

const LOG_PREFIX = '[RPC]'

let rpc: Client | null = null
let isReady = false

const DETAILS_VARIANTS = [
  '–î–∞–∂–µ –º–µ–¥–≤–µ–¥–∏ –Ω–∞ –ö–∞–º—á–∞—Ç–∫–µ –¥–æ–≤–µ—Ä—è—é—Ç –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É! üêª‚ú®',
  '–î–∞–∂–µ –õ–∞–±—É–±—É –≤ –ö–∏—Ç–∞–µ –¥–æ–≤–µ—Ä—è—é—Ç –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É ü©∑',
  '–î–∞–∂–µ –ë–æ–±—Ä–∏—Ç–æ –ë–∞–Ω–¥–∏—Ç–æ –∏ –¢—É–Ω –¢—É–Ω –°–∞—Ö—É—Ä –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—à –ø—Ä–æ–∫—Å–∏ ‚Äî –∞ —Ç—ã? üî•',
  '–í –∂–∏–∑–Ω–∏ ‚Äî abort –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –≤ VPN ‚Äî abort –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –¥–∞—Å—Ç —Ç–µ–±—è —Å–ª–∏—Ç—å! üöÄ'
]

let detailsIndex = 0
let detailsInterval: NodeJS.Timeout | null = null
let currentState = '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
let startTimestamp = Math.floor(Date.now() / 1000)

export async function initDiscordRPC(): Promise<void> {
  if (rpc) {
    console.log(`${LOG_PREFIX} RPC already initialized`)
    return
  }

  rpc = new Client({ transport: 'ipc' })

 
  rpc.on('ready', async () => {
    isReady = true
    console.log(`${LOG_PREFIX} Connected successfully!`)
  
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å VPN –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try {
      const running = await isSingboxRunning()
      currentState = running ? '–ü–æ–¥–∫–ª—é—á—ë–Ω –∫ VPN' : '–û—Ç–∫–ª—é—á—ë–Ω –æ—Ç VPN'
    } catch (e) {
      console.error(`${LOG_PREFIX} Failed to get VPN status:`, e)
      currentState = '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
    }
  
    startTimestamp = Math.floor(Date.now() / 1000)  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º—Å—Ç–∞–º–ø–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    startDetailsRotation()
  })

  rpc.on('disconnected', () => {
    isReady = false
    console.log(`${LOG_PREFIX} Disconnected!`)
    stopDetailsRotation()
    rpc = null
  })

  try {
    await rpc.login({ clientId: DISCORD_CONFIG.CLIENT_ID })
  } catch (err) {
    console.error(`${LOG_PREFIX} Auth error:`, err)
    isReady = false
    rpc = null
  }
}

function startDetailsRotation(): void {
  if (!rpc) return

  // –°—Ä–∞–∑—É –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å
  updateActivityWithCurrentDetails()

  if (detailsInterval) {
    clearInterval(detailsInterval)
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 15 —Å–µ–∫—É–Ω–¥
  detailsInterval = setInterval(() => {
    updateActivityWithCurrentDetails()
  }, 15000)
}

function stopDetailsRotation(): void {
  if (detailsInterval) {
    clearInterval(detailsInterval)
    detailsInterval = null
  }
}

function updateActivityWithCurrentDetails(): void {
  if (!rpc) return

  const currentDetails = DETAILS_VARIANTS[detailsIndex]
  detailsIndex = (detailsIndex + 1) % DETAILS_VARIANTS.length

  console.log(`${LOG_PREFIX} Rotating status: ${detailsIndex}/${DETAILS_VARIANTS.length} - "${currentDetails}"`)

  const activity = {
    details: currentDetails,
    state: currentState,
    timestamps: {
      start: startTimestamp
    },
    assets: {
      large_image: DISCORD_CONFIG.DEFAULT_ACTIVITY.assets.large_image,
      large_text: DISCORD_CONFIG.DEFAULT_ACTIVITY.assets.large_text
    },
    buttons: DISCORD_CONFIG.DEFAULT_ACTIVITY.buttons
  }

  rpc
    .request('SET_ACTIVITY', {
      pid: process.pid,
      activity,
    })
    .then(() => {
      console.log(`${LOG_PREFIX} Activity updated: details="${currentDetails}", state="${currentState}"`)
    })
    .catch((err) => {
      console.error(`${LOG_PREFIX} Activity update error:`, err)
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        updateActivityWithCurrentDetails()
      }, 5000)
    })
}

export function setActivity(state: string): void {
  currentState = state
  updateActivityWithCurrentDetails()
}

export function clearActivity(): void {
  if (!rpc || !isReady) {
    console.warn(`${LOG_PREFIX} RPC not initialized`)
    return
  }

  rpc
    .request('SET_ACTIVITY', {
      pid: process.pid,
      activity: {}
    })
    .then(() => console.log(`${LOG_PREFIX} Activity cleared`))
    .catch((err) => console.error(`${LOG_PREFIX} Clear activity error:`, err))
}

export async function stopDiscordRPC(): Promise<void> {
  if (!rpc) return

  try {
    await rpc.destroy()
  } catch (e) {
    console.error(`${LOG_PREFIX} Stop RPC error:`, e)
  } finally {
    stopDetailsRotation()
    rpc = null
    isReady = false
  }
}

import { app, BrowserWindow, ipcMain } from 'electron'
import fs from 'fs'
import path from 'path'
import { spawn } from 'child_process'
import {
  checkRequiredFiles,
  // fetchConfig,
  getSingboxPath,
  getTelegramId,
  isSingboxRunning,
  runSingbox,
  saveTelegramId,
  stopSingboxAndDiscord
} from './vpn'
import { getLatestDiscordAppPath, copyPatchFiles, deletePatchFiles } from './discordFiles'
import { getSocks5Ping } from './Proxy/getSocks5Ping'

ipcMain.handle('get-telegram-id', async () => {
  return getTelegramId()
})

ipcMain.handle('check-vpn-status', async () => {
  return isSingboxRunning()
})

ipcMain.handle('run-vpn-setup', async (_event, telegramIdFromUI: string) => {
  try {
    const telegramId = telegramIdFromUI || getTelegramId()
    if (!telegramId) {
      throw new Error('Telegram ID not provided')
    }

    // üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Discord –∏ Sing-box, –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã
    await stopSingboxAndDiscord()

    // const configData = await fetchConfig(telegramId)

    const singboxPath = getSingboxPath()
    const configPath = path.join(singboxPath, 'config.json') // –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å
    // fs.writeFileSync(configPath, configData)

    checkRequiredFiles()
    copyPatchFiles(singboxPath)

    runSingbox(configPath, singboxPath) // –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å

    const discordPath = getLatestDiscordAppPath()
    const discordExe = path.join(discordPath, 'Discord.exe')
    if (!fs.existsSync(discordExe)) throw new Error('Discord.exe not found')

    spawnDiscord(discordExe, discordPath)

    return { success: true }
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : String(err)
    return { success: false, error: errorMessage }
  }
})

function spawnDiscord(discordExe: string, discordPath: string): void {
  spawn(discordExe, [], {
    detached: true,
    stdio: 'ignore',
    cwd: discordPath
  }).unref()
}

ipcMain.handle('update-discord-status', async () => {
  isSingboxRunning()
})

ipcMain.handle('stop-vpn', async () => {
  return stopSingboxAndDiscord()
})

ipcMain.handle('delete-discord-files', async () => {
  return deletePatchFiles()
})

ipcMain.handle('save-telegram-id', async (_event, telegramId: string) => {
  try {
    saveTelegramId(telegramId) // —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    return { success: true }
  } catch (err) {
    return { success: false, error: (err as Error).message }
  }
})

ipcMain.on('window-minimize', (event) => {
  const win = BrowserWindow.fromWebContents(event.sender)
  if (win) win.minimize()
})

ipcMain.on('window-maximize', (event) => {
  const win = BrowserWindow.fromWebContents(event.sender)
  if (!win) return
  if (win.isMaximized()) {
    win.unmaximize()
  } else {
    win.maximize()
  }
})

ipcMain.on('window-close', (event) => {
  const win = BrowserWindow.fromWebContents(event.sender)
  if (win) {
    // –ü—Ä—è—á–µ–º –≤ —Ç—Ä–µ–π –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    win.hide()
    event.preventDefault()
  }
})

ipcMain.handle('get-ping', async () => {
  try {
    const ping = await getSocks5Ping()
    return ping
  } catch (err) {
    return null // –∏–ª–∏ -1
  }
})

// test
const isDev = !app.isPackaged

const singboxPath = isDev
  ? path.resolve(__dirname, '../../resources')
  : path.resolve(process.resourcesPath, 'app.asar.unpacked', 'resources')

const configDir = path.join(app.getPath('appData'), 'PesherkinoVPN')
const userConfigPath = path.join(configDir, 'config.json')

ipcMain.handle(
  'save-config-file',
  async (_event, filename: string, content: string, link?: string) => {
    try {
      const filePath = path.join(singboxPath, filename)

      // –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ–±—ä–µ–∫—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å)
      const parsedContent = JSON.parse(content)

      // –£–±–∏—Ä–∞–µ–º currentLink –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ singboxPath
      if ('currentLink' in parsedContent) {
        delete parsedContent.currentLink
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ singboxPath –∫–æ–Ω—Ñ–∏–≥ –ë–ï–ó currentLink
      const finalContent = JSON.stringify(parsedContent, null, 2)
      await fs.promises.writeFile(filePath, finalContent, 'utf8')

      if (link) {
        await fs.promises.mkdir(configDir, { recursive: true })

        // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –∏–∑ AppData (–µ—Å–ª–∏ –µ—Å—Ç—å)
        let appDataConfig: Record<string, any> = {}
        try {
          const existing = await fs.promises.readFile(userConfigPath, 'utf8')
          appDataConfig = JSON.parse(existing)
        } catch {
          // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
          appDataConfig = {}
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ currentLink, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        appDataConfig.currentLink = link

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –æ–±—Ä–∞—Ç–Ω–æ –≤ AppData
        await fs.promises.writeFile(userConfigPath, JSON.stringify(appDataConfig, null, 2), 'utf8')
      }

      return { success: true, path: filePath }
    } catch (error) {
      return { success: false, error: (error as Error).message }
    }
  }
)


ipcMain.handle('check-config-exists', async (_event) => {
  const configPath = path.join(singboxPath, 'config.json')

  try {
    return fs.existsSync(configPath)
  } catch (error) {
    return false
  }
})

// const configDir = path.join(app.getPath('appData'), 'PesherkinoVPN')

ipcMain.handle('get-current-link', async () => {
  const configPath = path.join(configDir, 'config.json')
  try {
    const content = fs.readFileSync(configPath, 'utf-8')
    const config = JSON.parse(content)
    return config?.currentLink || null
  } catch {
    return null
  }
})

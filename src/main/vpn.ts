import path from 'path'
import fs from 'fs'
import { spawn, exec } from 'child_process'
import axios from 'axios'
import { app } from 'electron'
import { clearActivity, setActivity, stopDiscordRPC } from './DiscordRpc/discordPresence'

const isDev = !app.isPackaged

const singboxPath = isDev
  ? path.resolve(__dirname, '../../resources')
  : path.resolve(process.resourcesPath, 'app.asar.unpacked', 'resources')

export function getSingboxPath(): string {
  return singboxPath
}

const configDir = path.join(app.getPath('appData'), 'PesherkinoVPN')
const configFilePath = path.join(configDir, 'config.json')

function ensureConfigDirExists() {
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true })
  }
}

function loadConfig(): Record<string, any> {
  ensureConfigDirExists()
  let config: Record<string, any> = {}

  if (fs.existsSync(configFilePath)) {
    try {
      const data = fs.readFileSync(configFilePath, 'utf-8')
      config = JSON.parse(data)
    } catch {
      config = {}
    }
  }

  // üÜï –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º discordRpcEnabled –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
  if (typeof config.discordRpcEnabled === 'undefined') {
    config.discordRpcEnabled = true
    saveConfig(config) // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
  }

  return config
}

function saveConfig(config: Record<string, any>) {
  ensureConfigDirExists()
  fs.writeFileSync(configFilePath, JSON.stringify(config, null, 2), 'utf-8')
}

export function getTelegramId(): string | null {
  const config = loadConfig()
  return config.telegramId || null
}

export function saveTelegramId(id: string): void {
  const config = loadConfig()
  config.telegramId = id
  saveConfig(config)
}

const baseUrl =
  process.env.VITE_VPN_CONFIG_URL || 'https://sub.pesherkino.store:8443/pesherkino/vpn/config'

export async function fetchConfig(telegramId: string): Promise<Buffer> {
  const url = `${baseUrl}/${telegramId}`
  const response = await axios.get(url, { responseType: 'arraybuffer' })

  try {
    const jsonTest = JSON.parse(response.data.toString())
    if (jsonTest?.message === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫') {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
  } catch {
    // –µ—Å–ª–∏ –Ω–µ JSON ‚Äî –æ–∫, —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
  }

  return response.data
}

export function checkRequiredFiles(): void {
  const filesPath = path.join(singboxPath, 'dll')
  if (!fs.existsSync(filesPath)) throw new Error(`–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${filesPath}`)

  const requiredFiles = ['DWrite.dll', 'force-proxy.dll', 'proxy.txt']
  for (const file of requiredFiles) {
    if (!fs.existsSync(path.join(filesPath, file))) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`)
    }
  }
}

export function runSingbox(configPath: string): void {
  const singboxExe = path.join(singboxPath, 'sing-box.exe')
  if (!fs.existsSync(singboxExe)) throw new Error('sing-box.exe –Ω–µ –Ω–∞–π–¥–µ–Ω')

  spawn(singboxExe, ['run', '-c', configPath], {
    detached: true,
    stdio: 'ignore',
    cwd: singboxPath
  }).unref()
}

export async function isSingboxRunning(): Promise<boolean> {
  return new Promise((resolve) => {
    const cmd = process.platform === 'win32' ? 'tasklist' : 'ps aux'
    exec(cmd, (err, stdout) => {
      if (err) return resolve(false)
      const isRunning =
        process.platform === 'win32'
          ? stdout.toLowerCase().includes('sing-box.exe')
          : stdout.toLowerCase().includes('sing-box')
      resolve(isRunning)
    })
  })
}
export async function stopSingboxAndDiscord(): Promise<{ success: boolean; error?: any }> {
  try {
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Discord RPC:
    await stopDiscordRPC()
    await stopVpnStatusWatcher()
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Discord RPC:', e)
  }

  return new Promise((resolve) => {
    if (process.platform === 'win32') {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sing-box.exe –∏ Discord.exe
      exec('taskkill /IM sing-box.exe /F', (err1) => {
        exec('taskkill /IM Discord.exe /F', (err2) => {
          if (err1 && err2) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å sing-box.exe –∏ Discord.exe:', err1, err2)
            resolve({ success: false, error: { singbox: err1, discord: err2 } })
          } else if (err1) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å sing-box.exe:', err1)
            resolve({ success: false, error: { singbox: err1 } })
          } else if (err2) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Discord.exe:', err2)
            resolve({ success: false, error: { discord: err2 } })
          } else {
            resolve({ success: true })
          }
        })
      })
    } else {
      // –î–ª—è Linux/macOS
      exec('pkill sing-box', (err1) => {
        exec('pkill discord', (err2) => {
          if (err1 && err2) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å sing-box –∏ discord:', err1, err2)
            resolve({ success: false, error: { singbox: err1, discord: err2 } })
          } else if (err1) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å sing-box:', err1)
            resolve({ success: false, error: { singbox: err1 } })
          } else if (err2) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å discord:', err2)
            resolve({ success: false, error: { discord: err2 } })
          } else {
            resolve({ success: true })
          }
        })
      })
    }
  })
}

export function setDiscordRpcEnabled(enabled: boolean): void {
  const cfg = loadConfig()
  cfg.discordRpcEnabled = enabled
  saveConfig(cfg)
}

export function getDiscordRpcEnabled(): boolean {
  const cfg = loadConfig()
  return !!cfg.discordRpcEnabled
}

import { EventEmitter } from 'events'

const vpnEmitter = new EventEmitter()

let lastVpnStatus: boolean | null = null
let watcherInterval: NodeJS.Timeout | null = null

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ sing-box (VPN).
 * –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–º–∏—Ç–∏—Ç —Å–æ–±—ã—Ç–∏–µ 'change', –∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç Discord RPC —á–µ—Ä–µ–∑ setActivity.
 */
export async function startVpnStatusWatcher(intervalMs = 1000): Promise<void> {
  if (watcherInterval) return

  // –°–±—Ä–æ—Å–∏—Ç—å lastVpnStatus, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–∏–ª—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–æ—Ç—á–µ—Ä–∞
  lastVpnStatus = null

  const checkOnce = async () => {
    const running = await isSingboxRunning()
    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Discord RPC –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤–æ—Ç—á–µ—Ä–∞
    if (lastVpnStatus === null) {
      lastVpnStatus = running
      if (getDiscordRpcEnabled()) {
        if (running) {
          setActivity('‚ö°Ô∏è –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ VPN')
        } else {
          setActivity('üåë –û—Ç–∫–ª—é—á—ë–Ω –æ—Ç VPN')
        }
      }
      return
    }
    // –î–∞–ª–µ–µ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    if (lastVpnStatus !== running) {
      lastVpnStatus = running
      if (getDiscordRpcEnabled()) {
        if (running) {
          setActivity('–ü–æ–¥–∫–ª—é—á—ë–Ω –∫ VPN')
        } else {
          setActivity('–û—Ç–∫–ª—é—á—ë–Ω –æ—Ç VPN')
        }
      }
    }
  }

  await checkOnce()
  watcherInterval = setInterval(checkOnce, intervalMs)
}

export async function stopVpnStatusWatcher(): Promise<void> {
  if (watcherInterval) {
    clearInterval(watcherInterval)
    watcherInterval = null
    lastVpnStatus = null
    if (getDiscordRpcEnabled()) {
      try {
        await clearActivity()
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Discord:', e)
      }
    }
  }
}

/**
 * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ VPN: callback –ø–æ–ª—É—á–∏—Ç boolean (true=on, false=off)
 */
export function onVpnStatusChanged(callback: (running: boolean) => void): void {
  vpnEmitter.on('change', callback)
}
